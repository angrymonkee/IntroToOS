Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2015-12-02T20:37:13-05:00

====== P3L4: Synchronization Constructs ======


Synchronization is required to share resources

== Approaches: ==
  **Repeatedly check** — Spinlock
  **Wait for signal** — mutex and condition variables
  **Wait** — wasted CPU cycles

{{./screenshot_2015-12-02-204408.png}}

** Limitations of mutexes and condition variables require use of different types of constructs
Error prone
Not easy to use
Lack of expressive power

{{./screenshot_2015-12-02-204648.png}}


=== Spinlocks ===

Similar to mutex (mutually exclusive) but different because thread does not release the CPU, it spins and waits for the lock to be freed.

{{./screenshot_2015-12-02-204906.png}}


=== Semaphores ===

Acts like a traffic light by allowing some threads to obtain the lock and proceed or stops if condition is "zero"

Semaphores allow us to describe count related synchronization requirements.
	ex: 5 producers at the same time and no more

If cound is 1 then called a **Binary Semaphore**

{{./screenshot_2015-12-02-205415.png}}

{{./screenshot_2015-12-02-205636.png}}


=== POSIX Semaphore API ===

{{./screenshot_2015-12-02-205744.png}}
{{./screenshot_2015-12-02-205854.png}}


=== Reader Write Locks ===

Allow your code to specify different types of accesses to a shared resource. So you can have **Readers** of a file and **Writers** to a file all using the same locking mechanism.

{{./screenshot_2015-12-02-210153.png}}

It may be possible to elevate the priority of a reader to a write if the implementation supports it.

{{./screenshot_2015-12-02-210515.png}}


=== Linux API ===

{{./screenshot_2015-12-02-210227.png}}


=== Monitors ===

A high level synchronization construct used to simplify locking of shared resources. Monitors manage the locking, unlocking, checking and signaling between threads.

{{./screenshot_2015-12-02-211123.png}}
{{./screenshot_2015-12-02-211207.png}}


=== Some other types of Synchronizations Constructs ===

{{./screenshot_2015-12-02-211428.png}}
{{./screenshot_2015-12-02-211453.png}}


=== More Spinlocks ===

{{./screenshot_2015-12-02-211611.png}}

**Need hardware support (Atomic Instructions)**

Need atomic instruction to check and set the locking/unlocking of the spinlock

{{./screenshot_2015-12-02-212324.png}}

**Shared Memory Multiprocessors**

- Multiprocessors share memory between **ALL** processors
- Bus one at a time contention on memory resource (memory latency)
{{./screenshot_2015-12-02-212642.png}}

**No-Write** - writes to local CPU cache but not to shared memory
**Write-Through** - writes to both CPU cahce and shared memory everytime
**Write-Back** - writes to local CPU cache and shared memory backs up cache at intervals

{{./screenshot_2015-12-02-213207.png}}

**Cache Coherence**

Caches need to stay in synch when both processors reference the same shared memory address
{{./screenshot_2015-12-02-213631.png}}

**Write-Invalidate (WI)** - Writes to cache on CPU1 and invalidates the cache on CPU2. This creates a cache miss and requires CPU2 to go back to memory to pull in the updated value. **Less bandwidth**

**Write-Update (WU)** - Writes to cache on CPU1 and then updates the cache on CPU2. **Update is done immediately**

{{./screenshot_2015-12-02-213925.png}}


**Cache Coherence and Atomics**

Atomic instruction (lock) that needs to be done across two CPUs referencing the same shared memory.

**** Atomics by-pass local CPU cache and update memory directly everytime.**

Correct but takes longer

{{./screenshot_2015-12-02-214536.png}}


=== Spinlock Performance Metrics ===

Objectives:
- Low latency
- Low delay/wait time
- Low contention

{{./screenshot_2015-12-02-214755.png}}
{{./screenshot_2015-12-02-214907.png}}


**Test and Set Spinlock**

Problem...
{{./screenshot_2015-12-02-215224.png}}


Solution... sort of...
{{./screenshot_2015-12-02-215832.png}}

{{./screenshot_2015-12-02-220459.png}}


=== Spinlock "Delay" Alternatives ===

Delay improves contention because not all CPUs are trying to execute the atomic operation at the same time.

{{./screenshot_2015-12-02-220806.png}}

Variant #2...
{{./screenshot_2015-12-02-220857.png}}


=== Picking a good delay value!! ===

**Static Delay** - Simple! BUT unnecessary delays under low contention
**Dynamic Delay** - Harder BUT better with low loads than Static

{{./screenshot_2015-12-02-221219.png}}


=== Queuing Lock (Anderson Lock) ===

Every CPU in system has HL (has lock) or MW (must wait)

{{./screenshot_2015-12-02-221444.png}}
{{./screenshot_2015-12-02-221726.png}}


**Queuing Lock Implementation**

{{./screenshot_2015-12-02-222251.png}}



=== Spinlock Performance Comparison ===

{{./screenshot_2015-12-02-222528.png}}

Heavy load...
{{./screenshot_2015-12-02-222648.png}}

Light load...
{{./screenshot_2015-12-02-222858.png}}

**** NO SILVER BULLET!!!**






































